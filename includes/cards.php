<?php

require_once "includes/cardtypes.php";

card_check($user);
$jsonData = $swc->get_inventory_cards($user->get_uid());
$cards = new CardsView($user, $jsonData);

function generate_cards($user, $num){
    $deck = New Deck();    
    if(!$deck->get_deck_by_name("Starter Deck", $user)){
        $deck->create_new_deck("Starter Deck", $user);
    }
    while ($num < 10){
        $card = New Card();
        $cardType = get_random_type();
        $card->create_new_auto_card($user, $cardType, $deck->get_pk());
        $deck->add_card($card);
        $num += 1;
    }
}

function card_check($user){
    $db = new DBHandler();
    $query = "SELECT * from Card WHERE characterId = ?;";
    $values = array($user->get_uid());
    $types = array("i");
    $results = $db->execute_query($query, $values, $types);
    if($results->num_rows < 10){
        generate_cards($user, $results->num_rows);
    } 
}

function get_deck($card){
    $deck = New Deck();
    $deck->get_deck_by_pk($card->get_deck());
    return  $deck;
}

class CardsView{
    private $user;
    private $genCards;
    private $invCards;
    private $allCards;
    private $db;

    private function card_list(){
        $query = "SELECT * from Card WHERE characterId = ? and autoGenerated = 1;";
        $values = array($this->user->get_uid());
        $types = array("i");
        $results = $this->db->execute_query($query, $values, $types);
        while($row = $results->fetch_assoc()){
            $card = New Card();
            $card->set_card_from_query($row, $this->user);
            $this->genCards[] = $card;
            $this->allCards[] = $card;
        }
    }

    private function check_inv_cards($jsonObj){ 
        $entities = $jsonObj->swcapi->entities;
        $uids = array();
        $values = array($this->user->get_uid());
        $types = array("i");
        $query = "DELETE from Card WHERE autogenerated = 0 and characterId = ? and (";
        foreach($entities->entity as $entity){
            if(strpos($entity->value->name, "Pazaak Card") !== False){
                $uid = $entity->value->uid;
                $uid = explode(":", $uid)[1];
                $card = New Card();
                $set = $card->set_card_from_database(null, $this->user, $uid);
                if(!$set){
                    $hashStr = $entity->value->name;
                    $hashStr .= ",".$entity->value->images->small;
                    $hashStr .= ",".$entity->value->images->large;
                    $hashStr .= ",".$entity->value->images->customsmall;
                    $hashStr .= ",".$entity->value->images->customlarge;
                    $hashName = $entity->value->name;
                    $hash = hash("sha512", $hashStr);
                    $set = $card->create_new_inv_card($this->user, $uid, -1, $hashName, $hash);
                    if($set){
                        $this->invCards[] = $card;
                        $this->allCards[] = $card;
                        $query .= "uid != ? AND ";
                        $uids[] = $uid;
                        $values[] = $uid;
                        $types[] = "i";
                    }
                }
                else{
                    $this->invCards[] = $card;
                    $this->allCards[] = $card;
                    $query .= "uid != ? AND ";
                    $uids[] = $uid;
                    $values[] = $uid;
                    $types[] = "i";
                }
            }
        }
        $query = rtrim($query, " AND");
        $query .= ")";
        $result = $this->db->execute_query($query, $values, $types);
    }
    
    public function __construct($user, $invData){
        $this->user = $user;
        $this->db = new DBHandler();
        $this->invCards = array();
        $this->genCards = array();
        $this->allCards = array();
        $this->card_list();
        $this->check_inv_cards($invData);
    }

    public function get_generated_cards(){
        return $this->genCards;
    }

    public function get_inventory_cards(){
        return $this->invCards;
    }

    public function get_all_cards(){
        return $this->allCards;
    }

    public function get_generated_card_count(){
        return count($this->genCards);
    }

    public function get_inventory_card_count(){
        return count($this->invCards);
    }

    public function get_all_card_count(){
        return count($this->allCards);
    }
}